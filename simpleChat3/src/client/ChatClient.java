// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com package client;import com.lloseng.ocsf.client.AbstractClient;import com.lloseng.ocsf.client.ObservableClient;import common.*;import java.io.*;import java.util.Observable;import java.util.Observer;/** * This class overrides some of the methods defined in the abstract * superclass in order to give more functionality to the client. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave; * @author Fran&ccedil;ois B&eacute;langer * @version July 2000 */public class ChatClient implements Observer{  //Instance variables **********************************************    /**   * The interface type variable.  It allows the implementation of    * the display method in the client.   */  ChatIF clientUI;  private String pseudo;  private ObservableClient oc;    //Constructors ****************************************************    /**   * Constructs an instance of the chat client.   *   * @param host The server to connect to.   * @param port The port number to connect on.   * @param clientUI The interface type variable.   */    public ChatClient(String host, int port, ChatIF clientUI)     throws IOException   {    this.clientUI = clientUI;    this.pseudo = "";    this.oc = new ObservableClient(host, port);    oc.addObserver(this);    oc.openConnection();  }    //Instance methods ************************************************      /**   * This method handles all data that comes in from the server.   *   * @param msg The message from the server.   */  public void handleMessageFromServer(Object msg)   {    clientUI.display(msg.toString());  }  /**   * This method handles all data coming from the UI               *   * @param message The message from the UI.       */  public void handleMessageFromClientUI(String message)  {    try    {      int co = 1;      if(message.charAt(0)=='#'){        co = commands(message);      }      if(co==1) {        oc.sendToServer(message);      }    }    catch(IOException e)    {      clientUI.display        ("Could not send message to server.  Terminating client.");      quit();    }  }  /**   * Hook method called after the connection has been closed.   * The default implementation does nothing. The method   * may be overriden by subclasses to perform special processing   * such as cleaning up and terminating, or attempting to   * reconnect.   */  protected void connectionClosed() {    clientUI.display("Fin de connexion.");  }  /**   * Hook method called each time an exception is thrown by the   * client's thread that is waiting for messages from the server.   * The method may be overridden by subclasses.   *   * @param exception the exception raised.   */  protected void connectionException(Exception exception) {    clientUI.display("Connexion au serveur perdue, arrêt du programme");    clientUI.display("Exception : "+exception.toString());  }  protected void connectionEstablished(){ clientUI.display("La connection a bien été établie"); }  protected int commands(String command){    int co = 0;    if(command.equals("#quit")){ ////////// #quit      try {        oc.sendToServer("#quit");      } catch (IOException e) {        throw new RuntimeException(e);      }      quit();    } else if (command.equals("#logoff")){ ////////// #logoff      try {        oc.sendToServer("#logoff");        oc.closeConnection();      }catch(IOException e)      {        clientUI.display("Vous n'êtes pas connecté au serveur. Impossible de se déconnecter.");        quit();      }    } else if (command.startsWith("#login")){ ////////// #login      try {        oc.openConnection();        oc.sendToServer(command);      }catch(IOException e)      {        clientUI.display("Connexion impossible. Arrêt");        quit();      }    } else if (command.startsWith("#sethost ")){ ////////// #sethost      if(!oc.isConnected()){        String[] tab = command.split(" ");        oc.setHost(tab[1]);        System.out.println("Successfully changed the host by :"+oc.getHost());      }    } else if (command.startsWith("#setport ")){ ////////// #setport      String[] tab = command.split(" ");      oc.setPort(Integer.parseInt(tab[1]));      System.out.println("Successfully changed the port by :"+oc.getPort());    } else if (command.equals("#gethost")){ ////////// #gethost      clientUI.display(oc.getHost());    }else if (command.equals("#getport")){ ////////// #getport      clientUI.display(String.valueOf(oc.getPort()));    } else {      co = 1;    }    return co;  }  /**   * This method terminates the client.   */  public void quit()  {    try    {      oc.closeConnection();    }    catch(IOException e) {}    System.exit(0);  }  @Override  public void update(Observable o, Object arg) {    if(oc.CONNECTION_CLOSED.equals(arg)){      connectionClosed();    } else if (oc.CONNECTION_ESTABLISHED.equals(arg)) {      connectionEstablished();    } // else if (arg.getClass(Exception)){}    else {      handleMessageFromServer(arg);    }  }}//End of ChatClient class